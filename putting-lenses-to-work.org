#+TITLE:  Putting Lenses to Work
#+AUTHOR: John Wiegley
#+EMAIL:  johnw@newartisans.com
#+DATE:   8 Apr 2017

#+DESCRIPTION: A non-theory presentation of using lenses to get stuff done
#+KEYWORDS: lens haskell functional programming
#+LANGUAGE: en

\setbeamertemplate{footline}{}
\setbeamerfont{block body}{size=\small}
\definecolor{orchid}{RGB}{134, 134, 220}
\setbeamercolor{block title}{fg=white,bg=orchid}
\setbeamercolor{bgcolor}{fg=white,bg=blue}

* Overview
** Overview
1. Lens
2. Prism
3. Traversal & Fold
4. Map
5. State
6. Other
** Introduction
- Practical use of lenses, inspired by work

- Applied to the right problem, they are invaluable!
* Lens
** Lens
Lenses address some part of a "structure" that always exists
** Tuple
*** view (^.)
### Lens.Tuple.view.operator
*** view
### Lens.Tuple.view.function
** Tuple
*** set (.~)
### Lens.Tuple.set.operator
*** set
### Lens.Tuple.set.function
** Records
- Possibly the least interesting use of =lens=
- For shallow use, barely different from access and update syntax
- "Distinguished products"
** Records
#+begin_src haskell
{-# LANGUAGE TemplateHaskell #-}

module Lenses where

import Control.Lens

data Record = Record
  { _field1 :: Int
  , _field2 :: Int
  }
makeLenses ''Record
#+end_src
# ** Records (Classy)
# =makeClassy= is an alternate lens builder that defines lenses as methods of a
# typeclass, making your record an instance of that class
# ** Records (Classy)
# #+begin_src haskell
# {-# LANGUAGE TemplateHaskell #-}

# module Lenses (Record, HasRecord(..)) where

# import Control.Lens

# data Record = Record
#   { _field1 :: Int
#   , _field2 :: Int
#   }
# makeClassy ''Record
# #+end_src
# ** Records (Classy)
# #+begin_src haskell
# class HasRecord r where
#   record :: Lens' r Record
#   field1 :: Lens' r Int
#   field2 :: Lens' r Int
#   {-# MINIMAL record #-}

# instance HasRecord Record where
#   ...
#   field1 f (Record x y) = ...
#   ...
# #+end_src
** Records
*** view
### Lens.records.view
*** set
### Lens.records.set
** Records
Record lenses become quite useful when structure is deep
** Records
*** With lens
#+begin_src haskell
v & foo.bar.baz +~ 1
#+end_src
** Records
*** Without lens
#+begin_src haskell
let f = _foo v
    b = _bar f
    z = _baz b in
v { _foo = f {
      _bar = b {
        _baz = z + 1 } } }
#+end_src
** Writing lenses by hand
#+begin_src haskell
my_1 :: Lens' (Integer, Integer) Int
my_1 f (p1, p2) =
  (\n -> (toInteger n, p2))
    <$> f (fromIntegral p1)

my_1 :: Functor f
     => (Int -> f Int)
     -> (Integer, Integer)
     -> f (Integer, Integer)
#+end_src
** Common operators
\begin{center}
\begin{tabular}{l@{\hspace{1em}}|@{\hspace{1em}}l@{\hspace{2em}}}
view       & \verb|v ^. l|     \\
set        & \verb|v & l .~ x| \\
(set Just) & \verb|v & l ?~ mx| \\
(incr)     & \verb|v & l +~ n| \\
(append)   & \verb|v & l <>~ x| \\
(apply)    & \verb|v & l %~ f| \\
(applyA)   & \verb|v & l %%~ f|
\end{tabular}
\end{center}
* Prism
** Prism
Prisms address some part of a "structure" that *may* exist
** ADTs
#+begin_src haskell
{-# LANGUAGE TemplateHaskell #-}

module Lenses where

import Control.Lens

data ADT = Alpha Int Int
         | Beta Record
         | Gamma String

makePrisms ''ADT
#+end_src
** ADTs
*** view (present)
### Lens.ADTs.preview.present
*** view (absent)
### Lens.ADTs.preview.absent
** ADTs
*** set (present)
### Lens.ADTs.setter.present
*** set (absent)
### Lens.ADTs.setter.absent
** ADTs
*** With lens
#+begin_src haskell
v & _Beta.field1 +~ 1
#+end_src
** ADTs
*** Without lens
#+begin_src haskell
case v of
  Beta z ->
    Beta (z { _field1 = _field1 z + 1 })
  _ -> v
#+end_src
** Writing prisms by hand
#+begin_src haskell
my_Left :: Prism' (Either Int Int) Int
my_Left = prism' Left $
  either Just (const Nothing)
#+end_src
* Traversal & Fold
** Traversals
Traversals address many parts of a "structure" that *may* exist
** Collections
*** preview
### Traversal.List.preview
*** set
### Traversal.List.set
** Computations
*** preview
### Traversal.computations.digits.preview
*** set
### Traversal.computations.digits.set
# ** Computations
# #+begin_src haskell
# digits :: Iso' Int [Int]
# digits =
#   iso (map (read :: String -> Int)
#          . sequence . (:[]) . show)
#       ((read :: String -> Int)
#          . concatMap show)
# #+end_src
** Computations
*** set (flexible)
### Traversal.computations.digits.set-flexible
** Monoids
- "Viewing" a traversal combines the elements using =Monoid=
- =^..= turns each element into a singleton list, so the =Monoid= result is a
  list of the elements
** Monoids
*** Monoid
### Traversal.List.monoid
*** A list of elements
### Traversal.List.toListOf
** Folds
*** allOf
### Traversal.List.allOf
** Folds
\begin{center}
\small
\begin{tabular}{lll}
\verb|allOf|     & \verb|andOf|       & \verb|anyOf|    \\
\verb|asumOf|    & \verb|concatMapOf| & \verb|concatOf| \\
\verb|elemOf|    & \verb|findMOf|     & \verb|findOf|   \\
\verb|firstOf|   & \verb|foldMapOf|   & \verb|foldOf|   \\
\verb|foldl1Of|  & \verb|foldl1Of'|   & \verb|foldlMOf| \\
\verb|foldlOf|   & \verb|foldlOf'|    & \verb|foldr1Of| \\
\verb|foldr1Of'| & \verb|foldrMOf|    & \verb|foldrOf|
\end{tabular}
\end{center}
** More Folds
\begin{center}
\small
\begin{tabular}{lll}
\verb|foldrOf'|     & \verb|forMOf_|     & \verb|forOf_|    \\
\verb|lastOf|       & \verb|lengthOf|    & \verb|lookupOf|  \\
\verb|mapMOf_|      & \verb|maximumByOf| & \verb|maximumOf| \\
\verb|minimumByOf|  & \verb|minimumOf|   & \verb|msumOf|    \\
\verb|noneOf|       & \verb|notElemOf|   & \verb|notNullOf| \\
\verb|nullOf|       & \verb|orOf|        & \verb|productOf| \\
\verb|sequenceAOf_| & \verb|sequenceOf_| & \verb|sumOf|     \\
\verb|toListOf|     & \verb|traverseOf_| &
\end{tabular}
\end{center}
** Vocabulary review
\begin{center}
\small
\begin{tabular}{l|l|l|l|l}
  \textbf{Class} &
  \textbf{Read} &
  \textbf{Write} &
  \textbf{Count} &
  \textbf{Example} \\ \hline\hline
Getter    & y    &       & 1       & \verb|to f| \\
Lens      & y    & y     & 1       & \verb|_1| \\
Iso       & y    & y     & 1       & \verb|lazy| \\ \hline
Prism     & y?   & y?    & 1?      & \verb|only| \\ \hline
Fold      & y?   &       & 0*      & \verb|folded| \\
Setter    &      & y?    & 0*      & \verb|mapped| \\
Traversal & y?   & y?    & 0*      & \verb|traverse|
\end{tabular}
\end{center}
** Common operators
\begin{center}
\begin{tabular}{l@{\hspace{1em}}|@{\hspace{1em}}l@{\hspace{2em}}}
toListOf & \verb|v ^.. l|    \\
preview  & \verb|v ^? l|     \\
(demand) & \verb|v ^?! l|
\end{tabular}
\end{center}
* Map
** Map
*** at (present)
### Map.at.view.present
*** at (absent)
### Map.at.view.absent
** Map
*** non (present)
### Map.at.non.present
*** non (absent)
### Map.at.non.absent
** Map
*** ix view (present)
### Map.ix.view.present
*** ix view (absent)
### Map.ix.view.absent
** Map
*** ix view (demand)
### Map.ix.view.demand
** Map
*** ix set (present)
### Map.ix.set.present
*** ix set (absent)
### Map.ix.set.absent
** Map
*** failing
### Map.ix.view.failing
* State
** State
*** use
### State.use
*** uses
### State.uses
** State
*** preuse
### State.preuse
*** preuses
### State.preuses
** State
*** set
### State.set
*** set (monadic)
### State.setM
** State
*** over
### State.over
** State
*** zoom
### State.zoom
** Lens
*** multi-set
### State.multi-set-plain
** Lens
*** stateful multi-set
### State.multi-set
* Other
** We didn't cover...
\begin{center}
\small
\begin{tabular}{lll}
\verb|ALens|        & \verb|LensLike|   & \verb|Writer|  \\
\verb|lens-action|  & \verb|lens-aeson| & \verb|thyme|    \\
Indexed lenses      & Zippers           & Exceptions      \\
Arrays              & Vectors           & \verb|FilePath| \\
\verb|Numeric.Lens| &                   &
\end{tabular}
\end{center}
** partsOf
*** indices
### Advanced.partsOf.indices
** partsOf
*** filtered
### Advanced.partsOf.filtered
** partsOf
*** each
### Advanced.partsOf.each
** partsOf
*** set
### Advanced.partsOf.set
** partsOf
*** multiple
### Advanced.partsOf.multiple
** ViewPatterns
*** lambda
### Advanced.view-patterns.lambda
** biplate
*** strings
### Advanced.biplate.strings
** biplate
*** ints
### Advanced.biplate.ints
** biplate
*** chars
### Advanced.biplate.chars
** biplate
*** with partsOf
### Advanced.biplate.partsOf
** biplate
*** filtered
### Advanced.biplate.filtered
** biplate
*** head
### Advanced.biplate.head
* Colophon

#+STARTUP: beamer
#+STARTUP: content fninline hidestars

#+LaTeX_CLASS: beamer
#+LaTeX_CLASS_OPTIONS: [utf8x,notes,17pt]

#+BEAMER_THEME: [height=16mm] Rochester
#+BEAMER_COLOR: seahorse

#+OPTIONS:   H:2 toc:nil

#+BEAMER_HEADER: \setbeamertemplate{navigation symbols}{}
#+BEAMER_HEADER: \usepackage{courier}
#+BEAMER_HEADER: \usepackage{helvet}

#+BEAMER_HEADER: \usepackage{pdfcomment}
#+BEAMER_HEADER: \renewcommand{\note}[1]{\marginnote{\pdfcomment[icon=Note]{#1}}}

#+BEAMER_HEADER: \usepackage{mathtools}
#+BEAMER_HEADER: \SetUnicodeOption{mathletters}
#+BEAMER_HEADER: \DeclareUnicodeCharacter{952}{\theta}

#+BEAMER_HEADER: \usepackage{minted}

# #+name: setup-minted
# #+begin_src emacs-lisp :exports both :results silent
# (setq org-latex-listings 'minted)
# (setq org-latex-minted-options
#       '(("fontsize" "\\footnotesize")
#         ("linenos" "true")))
# #+end_src

#+BEAMER_HEADER: \renewcommand{\arraystretch}{1.2}

#+BEAMER_HEADER: \let\svthefootnote\thefootnote
#+BEAMER_HEADER: \newcommand\blankfootnote[1]{%
#+BEAMER_HEADER:   \let\thefootnote\relax\footnotetext{#1}%
#+BEAMER_HEADER:   \let\thefootnote\svthefootnote%
#+BEAMER_HEADER:   }

#+BEAMER_HEADER: \newcommand{\head}[1]{\begin{center}
#+BEAMER_HEADER: \vspace{13mm}\hspace{-1mm}\Huge{{#1}}
#+BEAMER_HEADER: \end{center}}

#+SELECT_TAGS: export
#+EXCLUDE_TAGS: noexport

#+COLUMNS: %20ITEM %13BEAMER_env(Env) %6BEAMER_envargs(Args) %4BEAMER_col(Col) %7BEAMER_extra(Extra)
